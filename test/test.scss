@import 'true';
@import "../mappy-breakpoints";

$breakpoints: (
  small: 480px,
  large: 800px
  );

$mappy-queries: (
  phone : mappy-bp(h max small),
  tablet: mappy-bp(small large),
  numbers: mappy-bp(960px 1200px),
  features: mappy-bp(small orientation portrait),
  type: mappy-bp(small, $type: screen)
);

@include test-module('Conversions') {
  @include test('PX to EM for min-queries') {
    $mappy-map: mappy-bp(480px, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em)"))
  }

  @include test('PX to EM for max-queries') {
    $mappy-map: mappy-bp(max 800px, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(max-width: 49.9375em)"))
  }

  @include test('em to em') {
    $mappy-map: mappy-bp(30em, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em)"))
  }

  @include test('rem to em') {
    $mappy-map: mappy-bp(30rem, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em)"))
  }
}


// Test Media Strings
@include test-module('Media Queries') {
  @include test('should use $breakpoints map') {
    $mappy-map: mappy-bp(small, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em)"), 'should output min-width query of 30em from "small" key')
  }

  @include test('should output min-width and max-width queries') {
    $mappy-map: mappy-bp(small large, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em) and (max-width: 49.9375em)"))
  }

  @include test('should output min-width and min-height queries') {
    $mappy-map: mappy-bp(small h small, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em) and (min-height: 30em)"))
  }

  @include test('should output min-width and max-height queries') {
    $mappy-map: mappy-bp(small h max large, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-width: 30em) and (max-height: 49.9375em)"))
  }

  @include test('should output min-height and max-height queries') {
    $mappy-map: mappy-bp(h small large, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(min-height: 30em) and (max-height: 49.9375em)"))
  }

  @include test('should output additional queries other than width and height') {
    $mappy-map: mappy-bp(orientation portrait, $type: all, $query-fallback: null, $breakpoints: $breakpoints);
    $media-string: map-get($mappy-map, media-string);

    @include assert-equal($media-string, unquote("(orientation: portrait)"))
  }
}

html {
  @include mappy-bp(small large) {
    color: red;
  }
}


// .test-mappy-breakpoint {
//   /* Expected media string:
//    * ----------------------
//    * @media all and (min-width: 30em)
//    */
//   @include mappy-bp(small) {
//     color: red;
//   }
//  }

//  .test-mappy-query {
//   /* Expected media string:
//    * ----------------------
//    * @media all and (min-width: 30em) and (max: width: 49.9375em)
//    */
//   @include mappy-query(tablet) {
//     color: red;
//   }
// }

// .test-features {
//   /* Expected media string:
//    * ----------------------
//    * @media all and (min-width: 30em) and (max-width: 49.9375em) and (min-height: 30em) and (max-height: 49.9375em) and (orientation: portrait)
//    */
//   @include mappy-query(features) {
//     color: red;
//   }
// }

// .test-type {
//   /* Expected media string:
//    * ----------------------
//    * @media screen and (min-width: 30em) {
//    */
//   @include mappy-query(type) {
//     color: red;
//   }
// }

